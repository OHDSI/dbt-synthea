[project]
name = "dbt-synthea"
version = "0.1.0"
description = "[Under development] A dbt ETL project to convert a Synthea synthetic data set into the OMOP CDM"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []

[dependency-groups]
dev = [
  "jinja2",
  "pre-commit",
  "sqlfluff",
  "sqlfluff-templater-dbt",
  "ruff",
  "beautifulsoup4",
  "ruamel-yaml",
  "requests",
  "codespell",
]
duckdb = ["duckdb==1.3", "dbt-duckdb==1.9.3"]
postgres = ["dbt-postgres==1.9.0"]

[tool.uv]
default-groups = []

[tool.sqlfluff.core]
templater = "dbt"
dialect = "postgres"
sql_file_exts = [".sql", ".sql.j2", ".dml", ".ddl"]
exclude_rules = ["L031", "L014", "ST06", "LT05"]
large_file_skip_byte_limit = 0

[tool.sqlfluff.indentation]
indent_unit = "space"
indent_size = 4
indented_joins = false
indented_using_on = true
template_blocks_indent = false

[tool.sqlfluff.templater]
unwrap_wrapped_queries = true

[tool.sqlfluff.templater.jinja]
apply_dbt_builtins = true
load_macros_from_path = "macros"

[tool.sqlfluff.templater.dbt]
project_dir = "./"
profiles_dir = "~/.dbt"
# profile = "<dbt profile>"
# target = "<dbt target>"

[tool.sqlfluff.rules.capitalisation.identifiers]
capitalisation_policy = "lower"

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"

[tool.sqlfluff.layout.type.comma]
line_position = "leading"

[tool.sqlfluff]
ignore_paths = [
  "macros/",
  "target/",
  "dbt_packages/",
  "dbt-env/",
  "logs/",
  "seeds/",
  "scripts/",
]

[tool.ruff]
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 88

[tool.ruff.lint]
# See: https://docs.astral.sh/ruff/rules/
ignore = [
  "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
  "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
  "E731", # https://docs.astral.sh/ruff/rules/lambda-assignment/
  # If we use both ruff formatter and linter then some rules should always be disabled.
  # See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "W191",   # https://docs.astral.sh/ruff/rules/tab-indentation/
  "E111",   # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/
  "E114",   # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/
  "E117",   # https://docs.astral.sh/ruff/rules/over-indented/
  "D206",   # https://docs.astral.sh/ruff/rules/docstring-tab-indentation/
  "D300",   # https://docs.astral.sh/ruff/rules/triple-single-quotes/
  "Q000",   # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
  "Q001",   # https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/
  "Q002",   # https://docs.astral.sh/ruff/rules/bad-quotes-docstring/
  "Q003",   # https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/
  "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
  "COM819", # https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/
  "ISC002", # https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/
]

[tool.basedpyright]
# https://marketplace.visualstudio.com/items?itemName=detachhead.basedpyright
# https://docs.basedpyright.com/latest/configuration/config-files/#sample-pyprojecttoml-file
include = ["src", "tests", "devtools"]
pythonVersion = "3.12"
# Make ignoring type warnings easier:
reportIgnoreCommentWithoutRule = false
reportUnnecessaryTypeIgnoreComment = false
# A few typically noisy warnings, comment/uncomment as desired:
# reportMissingTypeStubs = false
# reportUnusedCallResult = false
# reportMissingImports = false
# reportUnnecessaryIsInstance = false
# reportUnreachable = false
# reportAny = false
# reportExplicitAny = false
# reportUnknownVariableType = false
# reportUnknownArgumentType = false
reportUnknownMemberType = false

[tool.codespell]
ignore-words-list = "infarction, EHR"
# skip = "foo.py,bar.py"
