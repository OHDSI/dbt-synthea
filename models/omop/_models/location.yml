models:
  - name: location
    description: The LOCATION table represents a generic way to capture physical location or address information
      of Persons and Care Sites.
    columns:
      - name: location_id
        description: The unique key given to a unique Location.
        data_type: integer
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
      - name: address_1
        description: This is the first line of the address.
        data_type: varchar(50)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 50
              row_condition: address_1 is not null
              strictly: false
      - name: address_2
        description: This is the second line of the address
        data_type: varchar(50)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 50
              row_condition: address_2 is not null
              strictly: false
      - name: city
        description: ''
        data_type: varchar(50)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 50
              row_condition: city is not null
              strictly: false
      - name: state
        description: ''
        data_type: varchar(2)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 2
              row_condition: state is not null
              strictly: false
      - name: zip
        description: ''
        data_type: varchar(9)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 9
              row_condition: zip is not null
              strictly: false
      - name: county
        description: ''
        data_type: varchar(20)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 20
              row_condition: county is not null
              strictly: false
      - name: location_source_value
        description: ''
        data_type: varchar(50)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 50
              row_condition: location_source_value is not null
              strictly: false
      - name: country_concept_id
        description: The Concept Id representing the country. Values should conform to the 
          [Geography](https://athena.ohdsi.org/search-terms/terms?domain=Geography&standardConcept=Standard&page=1&pageSize=15&query=&boosts)
          domain.
        data_type: integer
        tests:
          - relationships:
              to: ref('concept')
              field: concept_id
          - concept_record_completeness:
              threshold: '100'
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
          - dbt_utils.relationships_where:
              to: ref('concept')
              field: concept_id
              from_condition: country_concept_id != 0
              to_condition: standard_concept = 'S' AND invalid_reason IS NULL
      - name: country_source_value
        description: The name of the country.
        data_type: varchar(80)
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 80
              row_condition: country_source_value is not null
              strictly: false
      - name: latitude
        description: ''
        data_type: float
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('float') }}"
      - name: longitude
        description: ''
        data_type: float
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('float') }}"
