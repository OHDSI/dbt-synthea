models:
  - name: relationship
    description: The RELATIONSHIP table provides a reference list of all types of relationships that can
      be used to associate any two Concepts in the CONCEPT_RELATIONSHIP table, the respective reverse
      relationships, and their hierarchical characteristics. Note, that Concepts representing relationships
      between the clinical facts, used for filling in the FACT_RELATIONSHIP table are stored in the CONCEPT
      table and belong to the Relationship Domain.
    columns:
      - name: relationship_id
        description: The type of relationship captured by the relationship record.
        data_type: varchar(20)
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 20
              row_condition: relationship_id is not null
              strictly: false
      - name: relationship_name
        description: ''
        data_type: varchar(255)
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 255
              row_condition: relationship_name is not null
              strictly: false
      - name: is_hierarchical
        description: Defines whether a relationship defines concepts into classes or hierarchies. Values
          are 1 for hierarchical relationship or 0 if not.
        data_type: varchar(1)
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 1
              row_condition: is_hierarchical is not null
              strictly: false
      - name: defines_ancestry
        description: Defines whether a hierarchical relationship contributes to the concept_ancestor table.
          These are subsets of the hierarchical relationships. Valid values are 1 or 0.
        data_type: varchar(1)
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 1
              row_condition: defines_ancestry is not null
              strictly: false
      - name: reverse_relationship_id
        description: The identifier for the relationship used to define the reverse relationship between
          two concepts.
        data_type: varchar(20)
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('varchar') }}"
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 20
              row_condition: reverse_relationship_id is not null
              strictly: false
      - name: relationship_concept_id
        description: A foreign key that refers to an identifier in the [CONCEPT](https://ohdsi.github.io/CommonDataModel/cdm54.html#concept)
          table for the unique relationship concept.
        data_type: integer
        tests:
          - not_null
          - relationships:
              to: ref('concept')
              field: concept_id
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
