models:
  - name: condition_era
    description: "A Condition Era is defined as a span of time when the Person is assumed to have a given
      condition. Similar to Drug Eras, Condition Eras are chronological periods of Condition Occurrence
      and every Condition Occurrence record should be part of a Condition Era. Combining individual Condition
      Occurrences into a single Condition Era serves two purposes:  - It allows aggregation of chronic
      conditions that require frequent ongoing care, instead of treating each Condition Occurrence as
      an independent event. - It allows aggregation of multiple, closely timed doctor visits for the same
      Condition to avoid double-counting the Condition Occurrences. For example, consider a Person who
      visits her Primary Care Physician (PCP) and who is referred to a specialist. At a later time, the
      Person visits the specialist, who confirms the PCP's original diagnosis and provides the appropriate
      treatment to resolve the condition. These two independent doctor visits should be aggregated into
      one Condition Era."
    tests:
      - person_completeness:
          threshold: '95'
    columns:
      - name: condition_era_id
        description: ''
        data_type: integer
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
      - name: person_id
        description: ''
        data_type: integer
        tests:
          - not_null
          - relationships:
              to: ref('person')
              field: person_id
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
      - name: condition_concept_id
        description: The Concept Id representing the Condition.
        data_type: integer
        tests:
          - not_null
          - dbt_utils.relationships_where:
              to: ref('concept')
              field: concept_id
              from_condition: condition_concept_id <> 0
              to_condition: domain_id = 'Condition'
          - concept_record_completeness:
              threshold: '0'
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
          - dbt_utils.relationships_where:
              to: ref('concept')
              field: concept_id
              from_condition: condition_concept_id != 0
              to_condition: standard_concept = 'S' AND invalid_reason IS NULL
      - name: condition_era_start_date
        description: The start date for the Condition Era constructed from the individual instances of
          Condition Occurrences. It is the start date of the very first chronologically recorded instance
          of the condition with at least 31 days since any prior record of the same Condition.
        data_type: date
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('date') }}"
      - name: condition_era_end_date
        description: The end date for the Condition Era constructed from the individual instances of Condition
          Occurrences. It is the end date of the final continuously recorded instance of the Condition.
        data_type: date
        tests:
          - not_null
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_equivalent_types('date') }}"
      - name: condition_occurrence_count
        description: The number of individual Condition Occurrences used to construct the condition era.
        data_type: integer
        tests:
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: "{{ get_type_variants(['bigint', 'integer']) }}"
